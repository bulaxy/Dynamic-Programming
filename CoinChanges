const coinBag = [1, 3, 4, 5]
// const coinBag = [5]
// const target = 15
const target = 7

const tabMethod = () => {
    console.time('DP - Tab')
    const tab = []

    const dpFunction = (subTarget) => {
        let tempArr
        if (coinBag.includes(subTarget)) return [coinBag.find(value => value === subTarget)]

        for (let i of coinBag) {
            if (subTarget - i <= 0) break

            let tabRecord = tab[subTarget - i]
            if (!tabRecord) break
            if (tempArr === undefined || tempArr.length > tabRecord.length + 1) {
                tempArr = [...tabRecord, i]
            }
        }
        if (tempArr === undefined) return undefined
        return tempArr
    }

    // Loop through to create the tab records
    for (let i = 0; i < target + 1; i++) {
        tab.push(dpFunction(i))
    }

    // console.log(tab[target] ?? -1)

    if (tab[target] === undefined) {
        console.log(-1)
    } else {
        console.log(tab[target])
    }

    console.timeEnd('DP - Tab')
}

const bruteForce = () => {
    console.time('bruteforce')

    const recursiveFunction = (subTarget) => {
        let tempArr = []
        for (let i of coinBag) {
            switch (true) {
                case subTarget - i === 0:
                    tempArr.push([i])
                    break;
                case subTarget - 1 > 0:
                    tempArr = [...tempArr, ...recursiveFunction(subTarget - i).map(arr => [...arr, i])]
                    break;
                default:
                // nothing
            }
        }
        return tempArr
    }
    // Use reduce to find shortest
    let bruteForceResult = recursiveFunction(target)
        .reduce((curr, prev) => {
            if (curr === undefined) return prev
            if (curr.length > prev.length) return prev
            return curr
        }, undefined)
    if (bruteForceResult === undefined) {
        console.log(-1)
    } else {
        console.log(bruteForceResult)
    }

    console.timeEnd('bruteforce')
}

const memoMethod = () => {
    console.time('memo')

    const memoRecursiveFunction = (subTarget, memo = {}) => {
        // if already in memo, use memo value
        if (subTarget in memo) return memo[subTarget]
        let tempArr = []
        for (let i of coinBag) {
            switch (true) {
                case subTarget - i === 0:
                    tempArr.push([i])
                    break;
                case subTarget - 1 > 0:
                    tempArr = [...tempArr, ...memoRecursiveFunction(subTarget - i, memo).map(arr => [...arr, i])]
                    break;
                default:
                // nothing
            }
        }
        memo[subTarget] = tempArr
        return memo[subTarget]
    }
    // Use reduce to find shortest
    let memoResult = memoRecursiveFunction(target)
        .reduce((curr, prev) => {
            if (curr === undefined) return prev
            if (curr.length > prev.length) return prev
            return curr
        }, undefined)

    if (memoResult === undefined) {
        console.log(-1)
    } else {
        console.log(memoResult)
    }

    console.timeEnd('memo')
}

// tabMethod()
// bruteForce()
// memoMethod()
